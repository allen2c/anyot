# ./docker-compose.yml
version: '3'

services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000" # Grafana UI
    depends_on:
      - tempo
      - alloy
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - observability
    environment:
      # Optional: configure Grafana to automatically add Tempo as a datasource
      GF_DATASOURCES_0_NAME: Tempo
      GF_DATASOURCES_0_TYPE: tempo
      GF_DATASOURCES_0_URL: http://tempo:3200
      GF_DATASOURCES_0_ACCESS: proxy
      GF_DATASOURCES_0_BASICAUTH: false
      GF_DATASOURCES_0_ISDEFAULT: true
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file=/etc/tempo-local.yaml
    volumes:
      - ./tempo-local.yaml:/etc/tempo-local.yaml:ro
      - tempo_data:/tmp/tempo/blocks # Persist Tempo data
    ports:
      - "3200:3200"     # Tempo API/UI
      - "55680:55680"   # OTLP gRPC endpoint (for Alloy to send to Tempo)
      # Other Tempo ports if needed (e.g., for other protocols, not used in this setup):
      # - "4317:4317"   # OTLP gRPC (if Tempo was receiving directly)
      # - "4318:4318"   # OTLP HTTP (if Tempo was receiving directly)
      # - "14268:14268" # Jaeger gRPC
      # - "9411:9411"   # Zipkin
    networks:
      - observability

  alloy:
    image: grafana/alloy:latest # Using Grafana Alloy
    container_name: alloy
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy:ro
      - alloy_data:/var/lib/alloy/data # Persist Alloy data
    ports:
      - "12345:12345" # Alloy UI & pipeline debugging
      - "4318:4318"   # OTLP HTTP endpoint (for your Python app to send to Alloy)
      - "4317:4317"   # OTLP gRPC endpoint (optional, for other services to send to Alloy)
    depends_on:
      - tempo
    networks:
      - observability
    # Necessary for Alloy to scrape its own metrics, if you configure that
    # pid: "host"

volumes:
  grafana_data: {}
  tempo_data: {}
  alloy_data: {}

networks:
  observability:
    driver: bridge